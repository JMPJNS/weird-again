@page "/fetchdata"
@inject AuthenticationStateProvider auth

<PageTitle>Weather forecast</PageTitle>

@using System.Security.Claims
@using Weird_Again.Data;
@using Weird_Again.Services;
@using Weird_Again.Data.Models;
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole("admin"))
        {
            <p>You are in admin role</p>
        }
        else
        {
            <p>You're not signed in as a user in admin role.</p>
        }
    </Authorized>
    <NotAuthorized>
        Not Logged In
    </NotAuthorized>
</AuthorizeView>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!authState.User.Identity.IsAuthenticated)
        {
            return;
        }
        ((ClaimsIdentity)user.Identity).Claims.ToList().ForEach(x => Console.WriteLine(x.Value));
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
